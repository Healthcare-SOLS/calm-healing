// <auto-generated />
using System;
using Calm_Healing.DAL.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Calm_Healing.Migrations
{
    [DbContext(typeof(TenantDbContext))]
    partial class TenantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Calm_Healing.DAL.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("city");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Line1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("line1");

                    b.Property<string>("Line2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("line2");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("State")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("state");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("zipcode");

                    b.HasKey("Id")
                        .HasName("address_pkey");

                    b.HasIndex(new[] { "Uuid" }, "address_uuid_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Uuid" }, "uk_address_uuid")
                        .IsUnique();

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AppointmentMode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("appointment_mode");

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("appointment_type");

                    b.Property<Guid?>("BaseAppointmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("base_appointment_id");

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<long?>("ClinicianId")
                        .HasColumnType("bigint")
                        .HasColumnName("clinician_id");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<double?>("EstimatedAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("estimated_amount");

                    b.Property<long?>("GroupSettingsId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_settings_id");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<int?>("MonthDay")
                        .HasColumnType("integer")
                        .HasColumnName("month_day");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<int?>("NumberOfAppointments")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_appointments");

                    b.Property<string>("PlaceOfService")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("place_of_service");

                    b.Property<string>("RecurrenceType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("recurrence_type");

                    b.Property<int?>("RepeatEvery")
                        .HasColumnType("integer")
                        .HasColumnName("repeat_every");

                    b.Property<string>("RepeatOnDays")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("repeat_on_days");

                    b.Property<string>("SessionType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("session_type");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Timezone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("timezone");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("appointment_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("ClinicianId");

                    b.HasIndex("GroupSettingsId");

                    b.HasIndex("LocationId");

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.AppointmentCptCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint")
                        .HasColumnName("appointment_id");

                    b.Property<string>("CptCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cpt_code");

                    b.Property<int?>("Units")
                        .HasColumnType("integer")
                        .HasColumnName("units");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("appointment_cpt_codes_pkey");

                    b.HasIndex("AppointmentId");

                    b.ToTable("appointment_cpt_codes", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Availability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClinicianId")
                        .HasColumnType("bigint")
                        .HasColumnName("clinician_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("time_zone");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("availability_pkey");

                    b.HasIndex("ClinicianId");

                    b.ToTable("availability", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.BlockDay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AvailabilityId")
                        .HasColumnType("bigint")
                        .HasColumnName("availability_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("block_days_pkey");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex(new[] { "Uuid" }, "uk_block_days_uuid")
                        .IsUnique();

                    b.ToTable("block_days", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<string>("AlertNote")
                        .HasColumnType("text")
                        .HasColumnName("alert_note");

                    b.Property<bool?>("Archive")
                        .HasColumnType("boolean")
                        .HasColumnName("archive");

                    b.Property<string>("ClientStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("client_status");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<bool?>("EmailAppointmentRemainder")
                        .HasColumnType("boolean")
                        .HasColumnName("email_appointment_remainder");

                    b.Property<long?>("EmergencyContactId")
                        .HasColumnType("bigint")
                        .HasColumnName("emergency_contact_id");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ethnicity");

                    b.Property<string>("GenderIdentity")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gender_identity");

                    b.Property<long?>("GuardianContactId")
                        .HasColumnType("bigint")
                        .HasColumnName("guardian_contact_id");

                    b.Property<string>("LegalSex")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("legal_sex");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Mrn")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mrn");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method");

                    b.Property<bool?>("PhoneAppointmentReminder")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_appointment_reminder");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.Property<bool?>("PortalAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("portal_access");

                    b.Property<string>("PreferredLanguage")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("preferred_language");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("preferred_name");

                    b.Property<long?>("PrimaryClinicianId")
                        .HasColumnType("bigint")
                        .HasColumnName("primary_clinician_id");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("profile_image_url");

                    b.Property<string>("Race")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("race");

                    b.Property<long?>("ReferringClinicianId")
                        .HasColumnType("bigint")
                        .HasColumnName("referring_clinician_id");

                    b.Property<bool?>("TwoFactorAuthentication")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_authentication");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("client_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex("EmergencyContactId");

                    b.HasIndex("GuardianContactId");

                    b.HasIndex("PrimaryClinicianId");

                    b.HasIndex("ReferringClinicianId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Uuid" }, "uk_client_uuid")
                        .IsUnique();

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.ClientClinician", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<Guid>("ClinicianId")
                        .HasColumnType("uuid")
                        .HasColumnName("clinician_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.HasKey("Id")
                        .HasName("client_clinician_pkey");

                    b.ToTable("client_clinician", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.ClientGroupSettingsMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("client_group_settings_mapping_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex("GroupId");

                    b.ToTable("client_group_settings_mapping", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.ClientInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("GroupId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group_id");

                    b.Property<string>("InsuranceCardBack")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("insurance_card_back");

                    b.Property<string>("InsuranceCardFront")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("insurance_card_front");

                    b.Property<string>("InsuranceName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("insurance_name");

                    b.Property<string>("InsuranceType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("insurance_type");

                    b.Property<string>("MemberId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("member_id");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("relationship");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateOnly?>("SubscriberBirthDate")
                        .HasColumnType("date")
                        .HasColumnName("subscriber_birth_date");

                    b.Property<string>("SubscriberFirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subscriber_first_name");

                    b.Property<string>("SubscriberLastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("subscriber_last_name");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("client_insurance_pkey");

                    b.HasIndex("ClientId");

                    b.HasIndex(new[] { "Uuid" }, "uk_client_insurance_uuid")
                        .IsUnique();

                    b.ToTable("client_insurance", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Clinician", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_number");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("LanguagesSpoken")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("languages_spoken");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("NpiNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("npi_number");

                    b.Property<string>("Signature")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("signature");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<Guid?>("SupervisorClinicianUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("supervisor_clinician_uuid");

                    b.Property<bool?>("TwoFactorAuthentication")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_authentication");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("clinician_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Uuid" }, "uk_clinician_uuid")
                        .IsUnique();

                    b.ToTable("clinician", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.ClinicianLocationMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ClinicianId")
                        .HasColumnType("bigint")
                        .HasColumnName("clinician_id");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.HasKey("Id")
                        .HasName("clinician_location_mapping_pkey");

                    b.HasIndex("ClinicianId");

                    b.HasIndex("LocationId");

                    b.ToTable("clinician_location_mapping", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<bool?>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_number");

                    b.Property<string>("ContactType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contact_type");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("EmailId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_id");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fax_number");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("contacts_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex(new[] { "Uuid" }, "contacts_uuid_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Uuid" }, "uk_contacts_uuid")
                        .IsUnique();

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Databasechangelog", b =>
                {
                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("author");

                    b.Property<string>("Comments")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comments");

                    b.Property<string>("Contexts")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contexts");

                    b.Property<DateTime>("Dateexecuted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateexecuted");

                    b.Property<string>("DeploymentId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("deployment_id");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<string>("Exectype")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("exectype");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("filename");

                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("id");

                    b.Property<string>("Labels")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("labels");

                    b.Property<string>("Liquibase")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("liquibase");

                    b.Property<string>("Md5sum")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)")
                        .HasColumnName("md5sum");

                    b.Property<int>("Orderexecuted")
                        .HasColumnType("integer")
                        .HasColumnName("orderexecuted");

                    b.Property<string>("Tag")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tag");

                    b.ToTable("databasechangelog", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Databasechangeloglock", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<string>("Lockedby")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lockedby");

                    b.Property<DateTime?>("Lockgranted")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lockgranted");

                    b.HasKey("Id")
                        .HasName("databasechangeloglock_pkey");

                    b.ToTable("databasechangeloglock", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.DayWiseSlot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AvailabilityId")
                        .HasColumnType("bigint")
                        .HasColumnName("availability_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("day_of_week");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("day_wise_slots_pkey");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex(new[] { "Uuid" }, "uk_day_wise_slots_uuid")
                        .IsUnique();

                    b.ToTable("day_wise_slots", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.EmergencyContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("relationship");

                    b.Property<bool?>("ResponsibleParty")
                        .HasColumnType("boolean")
                        .HasColumnName("responsible_party");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("emergency_contact_pkey");

                    b.HasIndex(new[] { "Uuid" }, "uk_emergency_contact_uuid")
                        .IsUnique();

                    b.ToTable("emergency_contact", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.FeeSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("CodeType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code_type");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("ProcedureCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("procedure_code");

                    b.Property<double?>("Rate")
                        .HasColumnType("double precision")
                        .HasColumnName("rate");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("status");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("fee_schedule_pkey");

                    b.ToTable("fee_schedule", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Form", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<bool>("AutoAssign")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_assign");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("FormKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("form_key");

                    b.Property<string>("FormStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("form_status");

                    b.Property<string>("FormTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("form_title");

                    b.Property<string>("FormType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("form_type");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by");

                    b.Property<bool>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("forms_pkey");

                    b.HasIndex(new[] { "Uuid" }, "forms_uuid_key")
                        .IsUnique();

                    b.ToTable("forms", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.GroupSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<Guid?>("BillTo")
                        .HasColumnType("uuid")
                        .HasColumnName("bill_to");

                    b.Property<long>("ClinicianId")
                        .HasColumnType("bigint")
                        .HasColumnName("clinician_id");

                    b.Property<string>("CptCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cpt_code");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<bool?>("FamilyGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("family_group");

                    b.Property<string>("GroupInitials")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("group_initials");

                    b.Property<string>("GroupName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("group_name");

                    b.Property<DateTime>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("group_settings_pkey");

                    b.HasIndex("ClinicianId");

                    b.ToTable("group_settings", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<bool?>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_number");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("EmailId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_id");

                    b.Property<string>("Fax")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("fax");

                    b.Property<string>("GroupNpiNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("group_npi_number");

                    b.Property<string>("LocationName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("location_name");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("location_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex(new[] { "Uuid" }, "location_uuid_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Uuid" }, "uk_location_uuid")
                        .IsUnique();

                    b.ToTable("location", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<bool?>("MarkedAsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("marked_as_read");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("NotificationType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("notification_type");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("notifications_pkey");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Group")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("group");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Permission1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("permission");

                    b.Property<string>("PermissionKey")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("permission_key");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("permissions_pkey");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Practice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<bool?>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("ClinicName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("clinic_name");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_number");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("EmailId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email_id");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("NpiNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("npi_number");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tax_number");

                    b.Property<string>("TaxType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("tax_type");

                    b.Property<string>("Taxonomy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("taxonomy");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("practice_pkey");

                    b.HasIndex("AddressId");

                    b.HasIndex(new[] { "Uuid" }, "practice_uuid_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Uuid" }, "uk_practice_uuid")
                        .IsUnique();

                    b.ToTable("practice", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Modified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("role_name");

                    b.Property<Guid?>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("roles_pkey");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.RolePermissionMapping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("role_permission_mapping_pkey");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_permission_mapping", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Staff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("Archive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("archive");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("contact_number");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<bool?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("status");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("staff_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Uuid" }, "staff_uuid_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Uuid" }, "uk_staff_uuid")
                        .IsUnique();

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.StickyNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AlertNote")
                        .HasColumnType("text")
                        .HasColumnName("alert_note");

                    b.Property<string>("AlertNoteCreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("alert_note_created_by");

                    b.Property<DateTime?>("AlertNoteModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("alert_note_modified");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<string>("StickyNoteCreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sticky_note_created_by");

                    b.Property<DateTime?>("StickyNoteModified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("sticky_note_modified");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("sticky_note_pkey");

                    b.HasIndex(new[] { "Uuid" }, "sticky_note_uuid_key")
                        .IsUnique();

                    b.ToTable("sticky_note", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool>("Archive")
                        .HasColumnType("boolean")
                        .HasColumnName("archive");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("IamId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("iam_id");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("middle_name");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("modified");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("modified_by");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_verified");

                    b.Property<Guid>("Uuid")
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Uuid" }, "uk_user_uuid")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "uk_users_email")
                        .IsUnique();

                    b.HasIndex(new[] { "IamId" }, "uk_users_iam_id")
                        .IsUnique();

                    b.HasIndex(new[] { "Uuid" }, "users_uuid_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.UserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_role_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Appointment", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_appointment_client");

                    b.HasOne("Calm_Healing.DAL.Models.Clinician", "Clinician")
                        .WithMany("Appointments")
                        .HasForeignKey("ClinicianId")
                        .HasConstraintName("fk_appointment_clinician");

                    b.HasOne("Calm_Healing.DAL.Models.GroupSetting", "GroupSettings")
                        .WithMany("Appointments")
                        .HasForeignKey("GroupSettingsId")
                        .HasConstraintName("fk_appointment_group_settings");

                    b.HasOne("Calm_Healing.DAL.Models.Location", "Location")
                        .WithMany("Appointments")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("fk_appointment_location");

                    b.Navigation("Client");

                    b.Navigation("Clinician");

                    b.Navigation("GroupSettings");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.AppointmentCptCode", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Appointment", "Appointment")
                        .WithMany("AppointmentCptCodes")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("fk_appointment_appointment_cpt_codes");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Availability", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Clinician", "Clinician")
                        .WithMany("Availabilities")
                        .HasForeignKey("ClinicianId")
                        .IsRequired()
                        .HasConstraintName("fk_availability_clinician");

                    b.Navigation("Clinician");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.BlockDay", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Availability", "Availability")
                        .WithMany("BlockDays")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("fk_block_days_availability");

                    b.Navigation("Availability");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Client", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Address", "Address")
                        .WithMany("Clients")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_client_address");

                    b.HasOne("Calm_Healing.DAL.Models.EmergencyContact", "EmergencyContact")
                        .WithMany("ClientEmergencyContacts")
                        .HasForeignKey("EmergencyContactId")
                        .HasConstraintName("fk_client_emergency_contact");

                    b.HasOne("Calm_Healing.DAL.Models.EmergencyContact", "GuardianContact")
                        .WithMany("ClientGuardianContacts")
                        .HasForeignKey("GuardianContactId")
                        .HasConstraintName("fk_client_guardian_contact");

                    b.HasOne("Calm_Healing.DAL.Models.Clinician", "PrimaryClinician")
                        .WithMany("ClientPrimaryClinicians")
                        .HasForeignKey("PrimaryClinicianId")
                        .HasConstraintName("fk_client_primary_clinician");

                    b.HasOne("Calm_Healing.DAL.Models.Clinician", "ReferringClinician")
                        .WithMany("ClientReferringClinicians")
                        .HasForeignKey("ReferringClinicianId")
                        .HasConstraintName("fk_client_referring_clinician");

                    b.HasOne("Calm_Healing.DAL.Models.User", "User")
                        .WithMany("Clients")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_client_user");

                    b.Navigation("Address");

                    b.Navigation("EmergencyContact");

                    b.Navigation("GuardianContact");

                    b.Navigation("PrimaryClinician");

                    b.Navigation("ReferringClinician");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.ClientGroupSettingsMapping", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Client", "Client")
                        .WithMany("ClientGroupSettingsMappings")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("fk_cgsm_client");

                    b.HasOne("Calm_Healing.DAL.Models.GroupSetting", "Group")
                        .WithMany("ClientGroupSettingsMappings")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("fk_cgsm_group_settings");

                    b.Navigation("Client");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.ClientInsurance", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Client", "Client")
                        .WithMany("ClientInsurances")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_insurance_patient");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Clinician", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.User", "User")
                        .WithMany("Clinicians")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_clinician_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.ClinicianLocationMapping", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Clinician", "Clinician")
                        .WithMany("ClinicianLocationMappings")
                        .HasForeignKey("ClinicianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clinician_location_mapping_clinician");

                    b.HasOne("Calm_Healing.DAL.Models.Location", "Location")
                        .WithMany("ClinicianLocationMappings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_clinician_location_mapping_location");

                    b.Navigation("Clinician");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Contact", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_contacts_address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.DayWiseSlot", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Availability", "Availability")
                        .WithMany("DayWiseSlots")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("fk_day_wise_slots_availability");

                    b.Navigation("Availability");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.GroupSetting", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Clinician", "Clinician")
                        .WithMany("GroupSettings")
                        .HasForeignKey("ClinicianId")
                        .IsRequired()
                        .HasConstraintName("fk_group_settings_clinician");

                    b.Navigation("Clinician");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Location", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Address", "Address")
                        .WithMany("Locations")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_location_address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Practice", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Address", "Address")
                        .WithMany("Practices")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_practice_address");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.RolePermissionMapping", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Permission", "Permission")
                        .WithMany("RolePermissionMappings")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_permission");

                    b.HasOne("Calm_Healing.DAL.Models.Role", "Role")
                        .WithMany("RolePermissionMappings")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Staff", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.User", "User")
                        .WithMany("Staff")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_staff_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.UserRole", b =>
                {
                    b.HasOne("Calm_Healing.DAL.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user-role_role");

                    b.HasOne("Calm_Healing.DAL.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user-role_user");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Address", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Contacts");

                    b.Navigation("Locations");

                    b.Navigation("Practices");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentCptCodes");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Availability", b =>
                {
                    b.Navigation("BlockDays");

                    b.Navigation("DayWiseSlots");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Client", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClientGroupSettingsMappings");

                    b.Navigation("ClientInsurances");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Clinician", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Availabilities");

                    b.Navigation("ClientPrimaryClinicians");

                    b.Navigation("ClientReferringClinicians");

                    b.Navigation("ClinicianLocationMappings");

                    b.Navigation("GroupSettings");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.EmergencyContact", b =>
                {
                    b.Navigation("ClientEmergencyContacts");

                    b.Navigation("ClientGuardianContacts");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.GroupSetting", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClientGroupSettingsMappings");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Location", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClinicianLocationMappings");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Permission", b =>
                {
                    b.Navigation("RolePermissionMappings");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.Role", b =>
                {
                    b.Navigation("RolePermissionMappings");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Calm_Healing.DAL.Models.User", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Clinicians");

                    b.Navigation("Staff");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
